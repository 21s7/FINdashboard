import React, { useMemo } from "react";
import { useSelector, useDispatch } from "react-redux";
import { removeAsset } from "../slices/portfolioSlice";
import styles from "../assets/styles/Portfolio.module.scss";

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
const formatCurrency = (num, suffix = "‚ÇΩ") =>
  typeof num === "number"
    ? num.toLocaleString("ru-RU", { minimumFractionDigits: 2 }) + ` ${suffix}`
    : "‚Äî";

const formatPercentage = (value) =>
  `${value > 0 ? "+" : ""}${value.toFixed(2)}%`;

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Ç–∏–ø—É
const groupByType = (assets) => {
  const groups = {};
  assets.forEach((a) => {
    if (!groups[a.type]) groups[a.type] = [];
    groups[a.type].push(a);
  });
  return groups;
};

// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
const typeNames = {
  share: "–ê–∫—Ü–∏–∏",
  bond: "–û–±–ª–∏–≥–∞—Ü–∏–∏",
  currency: "–í–∞–ª—é—Ç—ã",
  crypto: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
  metal: "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã",
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
const typeIcons = {
  share: "üìà",
  bond: "üìä",
  currency: "üí±",
  crypto: "‚Çø",
  metal: "ü•á",
};

const Portfolio = () => {
  const dispatch = useDispatch();
  const portfolioAssets = useSelector((state) => state.portfolio.assets);

  const grouped = useMemo(
    () => groupByType(portfolioAssets),
    [portfolioAssets]
  );

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
  const totalPortfolioValue = useMemo(() => {
    return portfolioAssets.reduce((total, asset) => {
      const unitPrice =
        asset.type === "bond"
          ? asset.pricePercent
          : asset.price || asset.value || 0;

      const assetTotal =
        asset.type === "bond"
          ? (unitPrice / 100) * asset.quantity * 1000
          : unitPrice * asset.quantity;

      return total + assetTotal;
    }, 0);
  }, [portfolioAssets]);

  return (
    <div className={styles.portfolioView}>
      <div className={styles.header}>
        <h1 className={styles.title}>–ú–æ–π –ü–æ—Ä—Ç—Ñ–µ–ª—å</h1>
        <div className={styles.totalValue}>
          <span className={styles.totalLabel}>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
          <span className={styles.totalAmount}>
            {formatCurrency(totalPortfolioValue)}
          </span>
        </div>
      </div>

      <div className={styles.portfolioGrid}>
        {Object.entries(grouped).map(([type, assets]) => {
          const groupTotal = assets.reduce((sum, asset) => {
            const unitPrice =
              asset.type === "bond"
                ? asset.pricePercent
                : asset.price || asset.value || 0;

            const assetTotal =
              asset.type === "bond"
                ? (unitPrice / 100) * asset.quantity * 1000
                : unitPrice * asset.quantity;

            return sum + assetTotal;
          }, 0);

          return (
            <div key={type} className={styles.assetGroup}>
              <div className={styles.groupHeader}>
                <div className={styles.groupInfo}>
                  <span className={styles.groupIcon}>{typeIcons[type]}</span>
                  <h3 className={styles.groupTitle}>
                    {typeNames[type] || type}
                  </h3>
                </div>
                <div className={styles.groupTotal}>
                  <span className={styles.groupTotalAmount}>
                    {formatCurrency(groupTotal)}
                  </span>
                  <span className={styles.groupCount}>
                    {assets.length} –ø–æ–∑–∏—Ü–∏–π
                  </span>
                </div>
              </div>

              <div className={styles.assetList}>
                {assets.map((asset) => {
                  const unitPrice =
                    asset.type === "bond"
                      ? asset.pricePercent
                      : asset.price || asset.value || 0;

                  const total =
                    asset.type === "bond"
                      ? (unitPrice / 100) * asset.quantity * 1000
                      : unitPrice * asset.quantity;

                  const isPositive = asset.yearChangePercent > 0;
                  const isNegative = asset.yearChangePercent < 0;

                  return (
                    <div key={asset.portfolioId} className={styles.assetCard}>
                      <div className={styles.assetInfo}>
                        <div className={styles.assetName}>{asset.name}</div>
                        <div className={styles.assetDetails}>
                          <span className={styles.quantity}>
                            {asset.quantity}{" "}
                            {asset.type === "metal"
                              ? "–≥"
                              : asset.type === "currency"
                                ? "–µ–¥."
                                : "—à—Ç"}
                          </span>
                          <span className={styles.separator}>‚Ä¢</span>
                          <span className={styles.unitPrice}>
                            {asset.type === "bond"
                              ? `${unitPrice.toFixed(3)}%`
                              : formatCurrency(unitPrice)}
                          </span>
                        </div>
                      </div>

                      <div className={styles.assetValues}>
                        <div className={styles.totalValue}>
                          {formatCurrency(total)}
                        </div>
                        {asset.yearChangeValue !== undefined &&
                        asset.yearChangePercent !== undefined ? (
                          <div
                            className={`${styles.change} ${
                              isPositive
                                ? styles.positive
                                : isNegative
                                  ? styles.negative
                                  : styles.neutral
                            }`}
                          >
                            <span className={styles.changeValue}>
                              {formatCurrency(asset.yearChangeValue)}
                            </span>
                            <span className={styles.changePercent}>
                              ({formatPercentage(asset.yearChangePercent)})
                            </span>
                          </div>
                        ) : (
                          <div className={styles.noChange}>‚Äî</div>
                        )}
                      </div>

                      <button
                        className={styles.removeButton}
                        onClick={() =>
                          dispatch(
                            removeAsset({ portfolioId: asset.portfolioId })
                          )
                        }
                        aria-label="–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤"
                      >
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 16 16"
                          fill="currentColor"
                        >
                          <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.75.75 0 1 1 1.06 1.06L9.06 8l3.22 3.22a.75.75 0 1 1-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 0 1-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z" />
                        </svg>
                      </button>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>

      {portfolioAssets.length === 0 && (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üìä</div>
          <h3 className={styles.emptyTitle}>–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç</h3>
          <p className={styles.emptyMessage}>
            –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∞–∫—Ç–∏–≤—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
          </p>
        </div>
      )}
    </div>
  );
};

export default React.memo(Portfolio);
